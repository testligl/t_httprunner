# NOTE: Generated By HttpRunner v3.1.4
# FROM: testapi\submitInfringementApprove.yml


from httprunner import HttpRunner, Config, Step, RunRequest, RunTestCase


class TestCaseSubmitinfringementapprove(HttpRunner):

    config = Config("testcase description").verify(False)

    teststeps = [
        Step(
            RunRequest("查询未审核商品")
            .post("http://121.14.41.140:5683/api/bamboo/pdSpu/pageList")
            .with_headers(
                **{
                    "Accept": "application/json, text/plain, */*",
                    "Accept-Encoding": "gzip, deflate",
                    "Accept-Language": "zh-CN,zh;q=0.9,en;q=0.8",
                    "Authorization": "${get_authorization()}",
                    "Content-Type": "application/json;charset=UTF-8",
                }
            )
            .with_cookies(
                **{"Authorization": "${get_authorization()}", "appId": "${get_appId()}"}
            )
            .with_json(
                {
                    "current": 1,
                    "needPage": True,
                    "orderBy": "",
                    "pages": 0,
                    "parame": [],
                    "selectParame": [],
                    "selectParameter": {
                        "approveName": "",
                        "approveSubStatus": "4",
                        "belongDepartmentIdList": "",
                        "categoryIdList": "",
                        "chooseUserName": "李国龙",
                        "createDateEnd": "",
                        "createDateStart": "",
                        "infringementTimeEnd": "",
                        "infringementTimeStart": "",
                        "isSale": "0",
                        "presaleTimeEnd": "",
                        "presaleTimeStart": "",
                        "productNo": "",
                        "tag": "",
                        "testSubStatus": "",
                    },
                    "size": 10,
                }
            )
            .extract()
            .with_jmespath("body.data.records[0].id", "spuId")
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal("body.code", 200)
            .assert_equal("body.msg", "操作成功")
        ),
        Step(
            RunRequest("审核商品")
            .post(
                "http://121.14.41.140:5683/api/bamboo/approveSpu/submitInfringementApprove"
            )
            .with_headers(
                **{
                    "Accept": "application/json, text/plain, */*",
                    "Accept-Encoding": "gzip, deflate",
                    "Accept-Language": "zh-CN,zh;q=0.9,en;q=0.8",
                    "Access-Control-Max-Age": "86000",
                    "Authorization": "${get_authorization()}",
                    "Connection": "keep-alive",
                    "Content-Length": "556",
                    "Content-Type": "application/json;charset=UTF-8",
                }
            )
            .with_cookies(
                **{"Authorization": "${get_authorization()}", "appId": "${get_appId()}"}
            )
            .with_json(
                {
                    "approveInfringementDto": {
                        "approveImageVoList": None,
                        "approveResult": None,
                        "approveSpuDetailId": None,
                        "createDate": None,
                        "createId": None,
                        "createName": None,
                        "deleted": None,
                        "id": None,
                        "imageApprove": 1,
                        "imageRemark": None,
                        "infringementLevel": None,
                        "infringementType": None,
                        "modifiedDate": None,
                        "modifiedId": None,
                        "modifiedName": None,
                        "priceApprove": 1,
                        "priceRemark": None,
                        "remark": None,
                        "repeatApprove": 1,
                        "repeatRemark": None,
                        "spuId": None,
                        "titleApprove": 1,
                        "titleRemark": None,
                        "warehouseApprove": 1,
                        "warehouseRemark": None,
                    },
                    "spuChangeOrderId": None,
                    "spuId": "$spuId",
                }
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal("body.code", 200)
            .assert_equal("body.data", True)
            .assert_equal("body.msg", "操作成功")
        ),
    ]


if __name__ == "__main__":
    TestCaseSubmitinfringementapprove().test_start()
